[tool.poetry]
name = "lootscraper"
version = "1.11.0"
description = "RSS feeds and Telegram bot for free game and loot offers."
authors = ["Eiko Wagenknecht <git@eiko-wagenknecht.de>"]
readme = "README.md"
license = "CC-BY-NC-SA-4.0"
repository = "https://github.com/eikowagenknecht/lootscraper"
include = ["config.default.toml"]

[tool.poetry.scripts]
lootscraper = 'lootscraper.main:main'

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/eikowagenknecht/lootscraper/issues"

[tool.poetry.dependencies]
python = "^3.12.0"
alembic = "^1.12.1"
feedgen = "^0.9.0"
humanize = "^4.8.0"
httpx = "^0.25.0"
python-telegram-bot = { version = "^20.6", extras = ["rate-limiter"] }
playwright = "^1.39.0"
SQLAlchemy = "^2.0.22"
Unidecode = "^1.3.7"
xvfbwrapper = "^0.2.9"
jinja2 = "^3.1.2"
schedule = "^1.2.1"
pytz = "^2023.3.post1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Linting and formatting
ruff = "^0.1.3"
# Type checking
mypy = "^1.6"
# Profiling
scalene = "^1.5.31.1"
# Testing
pytest = "^7.4.3"
# Python standard
setuptools = "^68.0.0"
wheel = "^0.41.1"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.branches.main]
match = "(main)"
prerelease = false

[tool.semantic_release.branches.next]
match = "(next)"
prerelease = true
prerelease_token = "beta"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
    "revert",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# See rules here: https://beta.ruff.rs/docs/rules/
select = [
    "F",
    "W",
    "B",
    "E",
    "I",
    "N",
    "PLC",
    "PLE",
    # "PLR",
    "PLW",
    "TRY",
    "PTH",
    "TID",
    "SIM",
    "ARG",
    "TCH",
    "RET",
    "UP",
    "YTT",
    "SLF",
    "ANN",
    "S",
    "A",
    "COM",
    "DTZ",
    "C4",
    "ISC",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "INP",
    "ICN",
    "D",   # Pydocstyle
]

ignore = [
    "ANN101", # Missing type annotation for self in method - Not needed with Self type
    "ANN102", # Missing type annotation for cls in classmethod - Not needed
    "S101",   # Use of assert detected
    "TRY003", # Long messages in exceptions
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "D401",   # First line should be in imperative mood
    "D205",   # 1 blank line required between summary line and description
]

[tool.ruff.format]
line-ending = "lf"
preview = true

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.mypy]
python_version = "3.11"
# ignore imports from 3rd party libraries where no stubs are available
ignore_missing_imports = true
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
# disallow_any_unimported = true
# disallow_any_expr = true
disallow_any_generics = true
# plugins = "sqlalchemy.ext.mypy.plugin" # Needed for SQLAlchemy 1.4 only
